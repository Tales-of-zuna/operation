"use client";
import { useEffect, useState } from "react";

const SecondMethod = ({ matrix, freeVariables }: any) => {
  const [transformedMatrix, setTransformedMatrix] = useState(matrix);
  const [transformationSteps, setTransformationSteps] = useState<number[][][]>(
    [],
  );

  const gaussJordanSecondMethod = (tmatrix: number[][]): number[][] => {
    let tempMatrix = tmatrix.map((row) => [...row]);
    let pivotColumns: Set<number> = new Set();
    let steps: number[][][] = [tempMatrix.map((row) => [...row])]; // –≠—Ö–Ω–∏–π –º–∞—Ç—Ä–∏—Ü—ã–Ω —Ç”©–ª”©–≤ —Ö–∞–¥–≥–∞–ª–∞—Ö

    for (let row = 0; row < tempMatrix.length; row++) {
      // 0. –¢—ç–≥—ç—ç—Å —è–ª–≥–∞–∞—Ç–∞–π –≥–æ–ª —ç–ª–µ–º–µ–Ω—Ç —Å–æ–Ω–≥–æ—Ö. –•—ç—Ä—ç–≤ 0 –±–∞–π–≤–∞–ª —Ç—É—Ö–∞–π–Ω –º”©—Ä–∏–π–Ω –¥–∞—Ä–∞–∞–≥–∏–π–Ω –±–∞–≥–∞–Ω—ã–Ω —É—Ç–≥—ã–≥ —à–∞–ª–≥–∞—Ö
      let pivotColumn = -1;
      for (let col = 0; col < tempMatrix[row].length; col++) {
        if (tempMatrix[row][col] !== 0 && !pivotColumns.has(col)) {
          pivotColumn = col;
          pivotColumns.add(col);
          break;
        }
      }

      if (pivotColumn === -1) continue;

      let pivotElement = tempMatrix[row][pivotColumn];

      // 1. –ì–æ–ª —ç–ª–µ–º–µ–Ω—Ç ‚àíùëéùëüùë† ‚Äì–∏–π–≥ —É—Ä–≤—É—É —Ö—ç–º–∂–∏–≥–¥—ç—Ö“Ø“Ø–Ω –Ω—å —Å–æ–ª–∏–Ω–æ.
      tempMatrix[row][pivotColumn] = 1 / pivotElement;
      for (let col = 0; col < tempMatrix[row].length; col++) {
        if (col !== pivotColumn) {
          // 2. –Ø–ª–≥–∞–≥—á –º”©—Ä–∏–π–Ω –±—É—Å–∞–¥ —ç–ª–µ–º–µ–Ω—Ç–∏–π–≥ –≥–æ–ª —ç–ª–µ–º–µ–Ω—Ç—ç–¥ —Ö—É–≤–∞–∞–Ω–∞.
          tempMatrix[row][col] /= pivotElement;
        }
      }

      for (let i = 0; i < tempMatrix.length; i++) {
        if (i === row) continue;

        let factor = tempMatrix[i][pivotColumn];
        // 3. –Ø–ª–≥–∞–≥—á –±–∞–≥–∞–Ω—ã–Ω –±—É—Å–∞–¥ —ç–ª–µ–º–µ–Ω—Ç–∏–π–≥ —Ö—É–≤–∏—Ä–≥–∞—Ö
        tempMatrix[i][pivotColumn] = -factor / pivotElement;

        for (let j = 0; j < tempMatrix[i].length; j++) {
          if (j !== pivotColumn) {
            // 4. –Ø–ª–≥–∞–≥—á –º”©—Ä –±–∞–≥–∞–Ω—ã–Ω –±—É—Å –±—É—Å–∞–¥ —ç–ª–µ–º–µ–Ω—Ç“Ø“Ø–¥ –¥–∞—Ä–∞–∞—Ö —Ç–æ–º—å—ë–æ–≥–æ–æ—Ä —Ö—É–≤–∏—Ä–Ω–∞. ùëèij=(ùëéùëñùëó*ùëéùëüùë†‚àíùëéùëñùë†*ùëéùëüùëó)/(‚àíùëéùëüùë†)
            tempMatrix[i][j] =
              (tempMatrix[i][j] * pivotElement - tempMatrix[row][j] * factor) /
              -pivotElement;
          }
        }
      }
      steps.push(tempMatrix.map((row) => [...row])); // –ê–ª—Ö–∞–º —Ö–∞–¥–≥–∞–ª–∞—Ö
    }

    console.log(pivotColumns);
    setTransformationSteps(steps); // –ë“Ø—Ö —Ö—É–≤–∏—Ä–≥–∞–ª—Ç—ã–Ω –∞–ª—Ö–º—É—É–¥—ã–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö
    return tempMatrix;
  };

  const findXvalues = (matrix: number[][], freeVariables: number[]) => {};

  useEffect(() => {
    const tempMatrix = matrix.map((row: any) => [...row]);
    // –ú–∞—Ç—Ä–∏—Ü—ã–Ω –±“Ø—Ö —ç–ª–µ–º–µ–Ω—Ç“Ø“Ø–¥–∏–π–≥ -1 “Ø—Ä–∂“Ø“Ø–ª—ç—Ö
    for (let i = 0; i < tempMatrix.length; i++) {
      for (let j = 0; j < tempMatrix[i].length; j++) {
        tempMatrix[i][j] *= -1;
      }
    }
    setTransformedMatrix(gaussJordanSecondMethod(tempMatrix));
    // findXvalues(transformedMatrix, freeVariables);
  }, [matrix, freeVariables]);

  return (
    <div>
      <h3>–≠—Ö –º–∞—Ç—Ä–∏—Ü</h3>
      <div
        style={{
          display: "inline-block",
          padding: "10px",
        }}
      >
        {matrix.map((row: number[], rowIndex: number) => (
          <div
            key={rowIndex}
            style={{ display: "flex", justifyContent: "center" }}
          >
            {row.map((value, colIndex) => (
              <div
                key={colIndex}
                style={{ margin: "5px", minWidth: "30px", textAlign: "center" }}
              >
                {value}
              </div>
            ))}
          </div>
        ))}
      </div>

      <h3>–•—É–≤–∏—Ä–≥–∞–ª—Ç—ã–Ω –ê–ª—Ö–º—É—É–¥</h3>
      {transformationSteps.map((step, index) => (
        <div
          key={index}
          style={{
            marginBottom: "10px",
            padding: "10px",
          }}
        >
          <h4>–ê–ª—Ö–∞–º {index + 1}</h4>
          <div
            style={{
              display: "inline-block",
              padding: "10px",
            }}
          >
            {step.map((row: number[], rowIndex: number) => (
              <div
                key={rowIndex}
                style={{ display: "flex", justifyContent: "center" }}
              >
                {row.map((value, colIndex) => (
                  <div
                    key={colIndex}
                    style={{
                      margin: "5px",
                      minWidth: "30px",
                      textAlign: "center",
                    }}
                  >
                    {value}
                  </div>
                ))}
              </div>
            ))}
          </div>
        </div>
      ))}

      <h3>–≠—Ü—Å–∏–π–Ω –•—É–≤–∏—Ä–≥–∞—Å–∞–Ω –ú–∞—Ç—Ä–∏—Ü</h3>
      <div
        style={{
          display: "inline-block",
          padding: "10px",
        }}
      >
        {transformedMatrix.map((row: number[], rowIndex: number) => (
          <div
            key={rowIndex}
            style={{ display: "flex", justifyContent: "center" }}
          >
            {row.map((value, colIndex) => (
              <div
                key={colIndex}
                style={{ margin: "5px", minWidth: "30px", textAlign: "center" }}
              >
                {value}
              </div>
            ))}
          </div>
        ))}
      </div>
    </div>
  );
};

export default SecondMethod;
